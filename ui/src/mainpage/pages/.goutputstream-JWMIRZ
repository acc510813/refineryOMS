/*************************************************************************
 * PipeAdmin.js
 * Copyright (C) 2018  A. E. Van Ness
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ***********************************************************************/

import React, {Component} from 'react';
import {SERVERROOT, IMAGEHEIGHT, IMAGEWIDTH}    from '../../Parameters.js';
import PipeList        from './lists/PipeList.js';
import PipeForm        from './forms/PipeForm.js';
import DefaultContents from './DefaultContents.js';
import Log             from '../requests/Log.js';
import OMSRequest      from '../requests/OMSRequest.js';
import Waiting         from './Waiting.js';
import {Pipe}           from './objects/Pipe.js';



class PipeAdmin extends Component {
  constructor(props) {
    super(props);
    this.state = {
      stage: props.stage,
      updateData: false,
      updateDisplay: true,
      returnedText: null,
      type: "P",
      types: null,
      pipe: null,
      siteLocation: null
    };
    this.finishListFetch   = this.finishListFetch.bind(this);
    this.finishSiteFetch   = this.finishSiteFetch.bind(this);
    this.finishPipeFetch   = this.finishPipeFetch.bind(this);
    this.finishTypesFetch  = this.finishTypesFetch.bind(this);
    this.handlePipeSelect  = this.handlePipeSelect.bind(this);
    this.handlePipeUpdate  = this.handlePipeUpdate.bind(this);
    this.handleFieldChange = this.handleFieldChange.bind(this);
    this.handleMouseUp     = this.handleMouseUp.bind(this);
    this.handleQuit        = this.handleQuit.bind(this);
  }
  
  handleErrors(response) {
    if (!response.ok) {
        throw Error(response.status+" ("+response.statusText+")");
    }
    return response;
  }

  componentWillReceiveProps(nextProps) {
    if( nextProps.stage !== this.state.stage )
    {
      this.setState({ stage: nextProps.stage,
                      updateData: true,
                      updateDisplay: false,
                      returnedText: null });
    }
  }
  
  shouldComponentUpdate(nextProps,nextState) {
    let sts = nextState.updateDisplay;
    return sts;
  }

/* */
  finishPipeFetch( req ) {
    let pd = req;
    const p = new Pipe(pd.id,pd.name,pd.description,pd.tagTypeCode,pd.tagTypeId,pd.misc
                      ,pd.c1Lat,pd.c1Long,pd.c2Lat,pd.c2Long,pd.active,pd.vtxList);
    this.setState({stage: "pipeRetrieved", updateDisplay: true, pipe: p, nextCorner:1 });
  }

  finishTypesFetch(req) {
    this.setState({stage:"pipeRetrieved", updateDisplay:true, types: req });
  }

  finishSiteFetch(req) {
    this.setState({stage: "pipeRetrieved", updateDisplay: true, siteLocation:req });
  }
  
  handlePipeSelect(event) {
    const id = event.z;
    const loc = "PipeAdmin.pipeSelect";
    let req0 = new OMSRequest(loc, SERVERROOT + "/pipe/" + id,
                             "Problem selecting pipe id "+id, this.finishPipeFetch);
    req0.fetchData();
    if( this.state.types === null ) {
      let req1 = new OMSRequest(loc, SERVERROOT + "/tag/types",
                            "Problem retrieving tag types", this.finishTypesFetch);
      req1.fetchData();
    }
    if( this.state.siteLocation===null) {
      let req2 = new OMSRequest(loc, SERVERROOT + "/config/site",
                               "Problem retrieving site location ", this.finishSiteFetch);
      req2.fetchData();
    }
  }

  handlePipeUpdate(event) {
    event.preventDefault();
    const clsMthd = "PipeAdmin.handleUpdate";
    const pipe = this.state.pipe;
    const id = pipe.id;
    let method = "PUT";
    let url = "http://localhost:8080/oms/pipe/update";
    if( id === 0 ) {
      method = "POST";
      url = "http://localhost:8080/oms/pipe/insert";
    }
    const b = JSON.stringify(pipe);
    const request = async () => {
      try {
        await fetch(url, {method:method, headers:{'Content-Type':'application/json'}, body: b});
        alert("Update/insert complete on pipe, id="+id)
      } catch( error ) {
        const emsg = "Problem "+(id===0?"inserting":"updating")+" pipe, id="+id;
        alert(emsg+"\n"+error);
        Log.error(emsg+" - " + error,clsMthd);
      }
    }
    request();
  }

  componentDidMount() {
    this.fetchList("P");
  }
  
  componentDidUpdate( prevProps, prevState ) {
    switch (this.state.stage) {
      case "begin":
        break;
      default:
    }
  }
  
  handleFieldChange(event) {
    const target = event.target;
    const value = target.value;
    const name = target.name;
    let pnew = Object.assign({},this.state.pipe);
    if( target !== 'vtxList' ) {
      pnew[name] = value;
      this.setState({pipe:pnew} );
    }
  }


  finishListFetch( req ) {
    this.setState( {stage:"dataFetched", updateDisplay:true, returnedText: req } );
  }
    
  fetchList(type) {
    let loc = "PipeAdmin.fetchList";
    let req0 = new OMSRequest(loc, SERVERROOT + "/tag/type/" + type,
                            "Problem selecting tag list", this.finishListFetch);
    req0.fetchData();
  }
  
  handleQuit(event) {
    event.preventDefault();
    this.fetchList(this.state.type);
    this.setState( {returnedText: null, 
                    updateData: true, 
                    updateDisplay:true,
                    stage: "begin" } );
  }
  
  handleMouseUp(event) {
    const e = event;
    const t = e.evt;
    if( ! this.state.pathSelection ) {
      var x = t.offsetX;
      var y = t.offsetY;
      var l = this.state.siteLocation;
      var lat = l.c1Lat + y * (l.c2Lat-l.c1Lat) / IMAGEHEIGHT;
      var long = l.c1Long + x * (l.c2Long-l.c1Long) / IMAGEWIDTH;
     Log.info( "PipeAdmin.mouseUp: siteLocation=(NW["+l.c1Lat+","+l.c1Long+"]"
                 + " SE("+l.c2Lat+","+l.c2Long+")]");
      Log.info( "PipeAdmin.mouseUp: "+lat+","+long);
      let pnew = Object.assign({},this.state.pipe);
      pnew.vtxList = pnew.vtxList.concat(lat.substr(1,10)+","+long.substr(0,10));
      this.setState( {pipe: pnew} );
    }
  }
 
  render() {
    switch( this.state.stage ) {
  	  case "begin":
        return <Waiting />
      case "dataFetched":
        return <PipeList returnedText = {this.state.returnedText}
                         pipeSelect   = {this.handlePipeSelect} />
      case "pipeRetrieved":
        if( (this.state.pipe === null) || (this.state.siteLocation===null) ||
            (this.state.types === null) ) {
          return <Waiting />
        } else {
          return <PipeForm pipe          = {this.state.pipe}
                           siteLoc       = {this.state.siteLocation}
                           types         = {this.state.types}
                           pathSelect    = {this.state.pathSelection}
                           pipeUpdate    = {this.handlePipeUpdate}
                           fieldChange   = {this.handleFieldChange}
                           handleMouseUp = {this.handleMouseUp}
                           handleQuit    = {this.handleQuit} />
        }
      default:
        return <DefaultContents />
    }
  }
}

export default PipeAdmin;
