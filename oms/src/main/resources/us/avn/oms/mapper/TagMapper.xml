<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="us.avn.oms.mapper.TagMapper">

  <!-- cache / -->
<!-- 
	Collection<Tag> getAllTags( );
	
	Tag getTag( Long id);
	
	Integer updateTag( Tag t );

	Integer insertTag( Tag t );
-->  

  <resultMap id="cvMap" type="ChildValue">
    <result property="id"               column="id" />
    <result property="name"             column="name" />
    <result property="description"      column="description" />
    <result property="tagTypeCode"      column="tag_type_code" />
    <result property="misc"             column="misc" />
    <result property="c1Lat"            column="c1_lat" />
    <result property="c1Long"           column="c1_long" />
    <result property="c2Lat"            column="c2_lat" />
    <result property="c2Long"           column="c2_long" />
    <result property="active"           column="active" />
    <result property="relTagId"         column="rel_tag_id" />
    <result property="parentId"         column="parent_id" />
    <result property="inpTagId"         column="inp_id" />
    <result property="inpTagName"       column="inp_tag" />
    <result property="inpType"          column="inp_type" />
    <result property="inpRelTagId"      column="inp_rel_tag_id" />
    <result property="inpValue"         column="inp_value" />
    <result property="inpMax"           column="inp_max" />
    <result property="inpZero"          column="inp_zero" />
    <result property="inpAlmColor"      column="inp_alm_color" />
    <result property="outTagId"         column="out_id" />
    <result property="outTagName"       column="out_tag" />
    <result property="outType"          column="out_type" />
    <result property="outRelTagId"      column="out_rel_tag_id" />
    <result property="outValue"         column="out_value" />
    <result property="outMax"           column="out_max" />
    <result property="outZero"          column="out_zero" />
    <result property="outAlmColor"      column="out_alm_color" />
  </resultMap>
  
  <resultMap id="tagResultMap" type="Tag">
     <result property="id"              column="id"/>
     <result property="name"            column="name"/>
     <result property="description"     column="description"/>
     <result property="tagTypeCode"     column="tag_type_code"/>
     <result property="tagTypeId"       column="tag_type_id"/>
     <result property="misc"            column="misc" />
     <result property="c1Lat"           column="c1_lat"/>
     <result property="c1Long"          column="c1_long"/>
     <result property="c2Lat"           column="c2_lat"/>
     <result property="c2Long"          column="c2_long"/>
     <result property="active"          column="active"/>
  </resultMap>

  <resultMap id="tagTypeMap" type="TagType">
     <result property="id"              column="id"/>
     <result property="name"            column="name"/>
     <result property="code"            column="code"/>
  </resultMap>
  
  <resultMap id="tagletResultMap" type="Taglet">
     <result property="id"              column="id"/>
     <result property="name"            column="name"/>
     <result property="description"     column="description"/>
     <result property="tagTypeCode"     column="tag_type_code"/>
     <result property="active"          column="active"/>
  </resultMap>
    
  <resultMap id="idNameResultMap" type="IdName">
     <result property="id"              column="id"/>
     <result property="name"            column="name"/>
  </resultMap>
    
  <resultMap id="tagRelationMap" type="RelTagTag">
    <result property="id" column="id" />
    <result property="parentTagId" column="parent_tag_id" />
    <result property="parent" column="parent" />
    <result property="childTagId" column="child_tag_id" />
    <result property="child" column="child" />
  </resultMap>

  <select id="getTag" resultMap="tagResultMap">
    select t.id, t.name, t.description, t.tag_type_code, tt.id tag_type_id
         , t.c1_lat, t.c1_long, t.c2_lat, t.c2_long, t.active, t.misc
      from tag t join tag_type tt on t.tag_type_code = tt.code
     where t.id = #{param1}
  </select>
  
  <select id="getAllTags" resultMap="tagResultMap">
    select t.id, t.name, t.description, t.tag_type_code, tt.id tag_type_id
         , t.c1_lat, t.c1_long, t.c2_lat, t.c2_long, t.active, t.misc
      from tag t join tag_type tt on t.tag_type_code = tt.code
     order by t.name
  </select>
  
  <select id="getTagByName" resultMap="tagResultMap">
    select t.id, t.name, t.description, t.tag_type_code, tt.id tag_type_id
         , t.c1_lat, t.c1_long, t.c2_lat, t.c2_long, t.active, t.misc
      from tag t join tag_type tt on t.tag_type_code = tt.code
     where t.name = #{param1} and t.tag_type_code = #{param2}
  </select>

  <select id="getAllTagsByType" resultMap="tagResultMap">
    select t.id, t.name, t.description, t.tag_type_code, t.misc
         , t.c1_lat, t.c1_long, t.c2_lat, t.c2_long, t.active
         , tt.id tag_type_id
      from tag t join tag_type tt on t.tag_type_code = tt.code
     where t.tag_type_code = #{param1}
     order by t.name
  </select>
  
  <select id="getTagsByTypeRandom" resultMap="tagResultMap">
    select t.id, t.name, t.description, t.tag_type_code, t.misc
         , t.c1_lat, t.c1_long, t.c2_lat, t.c2_long, t.active
         , tt.id tag_type_id
      from tag t join tag_type tt on t.tag_type_code = tt.code
     where t.tag_type_code = #{param1}
     order by rand()
  </select>
  
  <select id="getAllTagletsByType" resultMap="tagletResultMap">
    select t.id, t.name, t.description, t.tag_type_code, t.active
      from tag t
     where t.tag_type_code = #{param1}
     order by 2
  </select>  
  
  <select id="getAllIdNamesByType" resultMap="idNameResultMap">
    select t.id, t.name
      from tag t
     where t.tag_type_code = #{param1}
     order by 2
  </select>  
  
  <select id="getAllIdNamesByTypeList" resultMap="idNameResultMap">
    select t.id, t.name
      from tag t
     where t.tag_type_code in
        <foreach item="parm" index="index" collection="list"
             open="(" separator="," close=")">
        #{parm}
    </foreach>
     order by 2
  </select>
  
  <select id="getParentTags" resultMap="tagRelationMap" >
    select rtt.id, rtt.parent_tag_id, tp.name parent, rtt.child_tag_id, tc.name child
      from rel_tag_tag rtt join tag tp on rtt.parent_tag_id = tp.id
           join tag tc on rtt.child_tag_id = tc.id
     where rtt.child_tag_id = #{param1}
  </select>

  <select id="getParentTagsWCode" resultMap="tagResultMap">
    select t.id, t.name, t.description, t.tag_type_code, tt.id tag_type_id
         , t.c1_lat, t.c1_long, t.c2_lat, t.c2_long, t.active, t.misc
      from tag t join tag_type tt on t.tag_type_code = tt.code
      join rel_tag_tag rtt on rtt.parent_tag_id = t.id
     where rtt.child_tag_id = #{param1} and rtt.code = #{param2}
  </select>
  
  <select id="getChildTags" resultMap="tagRelationMap" >
    select rtt.id, rtt.parent_tag_id, tp.name parent, rtt.child_tag_id, tc.name child
      from rel_tag_tag rtt join tag tp on rtt.parent_tag_id = tp.id
           join tag tc on rtt.child_tag_id = tc.id 
     where rtt.parent_tag_id = #{param1}
  </select>
  
  <select id="getChildren" resultMap="tagRelationMap" >
    select rtt.id, rtt.parent_tag_id, tp.name parent, rtt.child_tag_id, tc.name child
      from rel_tag_tag rtt join tag tp on rtt.parent_tag_id = tp.id
           join tag tc on rtt.child_tag_id = tc.id 
     where rtt.parent_tag_id = #{param1}
       and (code = 'IN' or code is null)
     order by code
  </select>
  
  <select id="getChildrenOfType" resultMap="tagRelationMap" >
    select rtt.id, rtt.parent_tag_id, tp.name parent, rtt.child_tag_id, tc.name child
      from rel_tag_tag rtt join tag tp on rtt.parent_tag_id = tp.id
           join tag tc on rtt.child_tag_id = tc.id 
     where rtt.parent_tag_id = #{param1} and rtt.code=#{param2}
  </select>
  
  <select id="getParentOfType" resultMap="tagRelationMap" >
    select rtt.id, rtt.parent_tag_id, tp.name parent, rtt.child_tag_id, tc.name child
      from rel_tag_tag rtt join tag tc on rtt.child_tag_id = tc.id
           join tag tp on rtt.parent_tag_id = tp.id 
     where rtt.child_tag_id = #{param1} and rtt.code=#{param2}
  </select>
  
  <select id="getTagTypes" resultMap="tagTypeMap" >
    select id, code, name from tag_type order by code
  </select>
  
  <select id="getSchematicObjectTypes" resultMap="tagTypeMap" >
    select id, code, name from scm_object_vw
  </select>
  
  <!-- This query retrieves the children of schematics                      -->
  <!--                                                                      -->
  <!-- Note that we've limited the type of CHILDREN allowed to the parent   -->
  <!-- parent (tag of type SCM)                                             --> 
  <!-- -> {child} (tag of type SCO, related via the rel_tag_tag table)      -->
  <!--    -> {grandchild} (tag of type AI,DI,AO,DO                          -->
  <!--                     related via the rel_tag_tag table)               -->
  <select id="getSCMChildValues" resultMap="cvMap" >
    select tp.id parent_id, rtt.id rel_tag_id, tc.id, tc.name, tc.description, tc.misc
         , tc.tag_type_code, tc.active, tc.c1_lat, tc.c1_long, tc.c2_lat, tc.c2_long
         , inp_rel_tag_id, inp_id, inp_tag, inp_type, inp_value, inp_max, inp_zero, inp_alm_color
         , out_rel_tag_id, out_id, out_tag, out_type, out_value, out_max, out_zero, out_alm_color
      from tag tp join rel_tag_tag rtt on tp.id=rtt.parent_tag_id 
      join tag tc on rtt.child_tag_id=tc.id 
      join sco_ref_tag_vw srtv on tc.id = srtv.id 
     where tp.id = #{param1} 
       and tc.tag_type_code = 'SCO' 
     order by tc.name
  </select>
  
  <!-- This query retrieves the level child for a given tank to be used as -->
  <!-- a schematic object.                                                 -->
  <!--                                                                     -->
  <!-- It's suboptimal in that the tank/ not-tank show up as a union of    -->
  <!-- two queries when we only expect to return one row, but it allows us -->
  <!-- to use the same "query" to fetch both the source and destination    -->
  <!-- w/o caring about what kind of tag it is.  I hope.                   -->
  <!--                                                                     -->
  <!-- One caveat: the source and destination must have an associated tag  -->
  <!-- for the object, ie, like a tag signifying the state of the object   -->
  <select id="getTransferTankLevelChild" resultMap="cvMap">
    select t.id, t.name, t.description, t.misc, t.tag_type_code, t.active
         , t.c1_lat, t.c1_long, t.c2_lat, t.c2_long
         , av.tag_id inp_id, av.scan_value inp_value
         , tc.name inp_tag, tc.tag_type_code inp_type
         , av.max_value inp_max, av.zero_value inp_zero, av.alarm_color inp_alm_color  
      from tag t join rel_tag_tag rtt on t.id=rtt.parent_tag_id 
      join ad_value_vw av on rtt.child_tag_id=av.tag_id 
      join analog_input aic on aic.tag_id=av.tag_id
      join tag tc on aic.tag_id=tc.id
     where t.id = #{param1} 
       and rtt.code is null 
       and aic.analog_type_code='L'
    union
    select t.id, t.name, t.description, t.misc, t.tag_type_code, t.active
         , t.c1_lat, t.c1_long, t.c2_lat, t.c2_long
         , av.tag_id inp_id, av.scan_value inp_value
         , tc.name inp_tag, tc.tag_type_code inp_type
         , av.max_value inp_max, av.zero_value inp_zero, av.alarm_color inp_alm_color
      from tag t join rel_tag_tag rtt on t.id=rtt.parent_tag_id 
      join ad_value_vw av on rtt.child_tag_id=av.tag_id
      join tag tc on rtt.child_tag_id=tc.id
     where t.id = #{param1}
       and t.tag_type_code != 'TK'
       and rtt.code is null
  </select>
  
  <!-- This query retrieves the children for the end points for a transfer -->
  <!--                                                                     -->
  <select id="getTransferChildValues" resultMap="cvMap">
    select tc.id, tc.name, tc.description, tc.misc, tc.tag_type_code, tc.active
         , tc.c1_lat, tc.c1_long, tc.c2_lat, tc.c2_long
         , av.tag_id inp_id, av.scan_value inp_value
         , tgc.name inp_tag, tgc.tag_type_code inp_type
         , av.max_value inp_max, av.zero_value inp_zero, av.alarm_color inp_alm_color  
      from rel_tag_tag rtt join tag t on t.id=rtt.parent_tag_id
      join tag tc on tc.id=rtt.child_tag_id 
      join rel_tag_tag rttc on rtt.child_tag_id = rttc.parent_tag_id
      join ad_value_vw av on rttc.child_tag_id=av.tag_id
      join tag tgc on rttc.child_tag_id=tgc.id 
     where rtt.parent_tag_id = #{param1} 
       and rtt.code = #{param2}
  </select>
  
  <!-- This query retrieves the children for the end points for a transfer -->
  <!--                                                                     -->
  <select id="getTransferSensorValues" resultMap="cvMap">
    select t.id, t.name, t.description, t.misc, t.tag_type_code, t.active
         , t.c1_lat, t.c1_long, t.c2_lat, t.c2_long
         , av.tag_id inp_id, av.scan_value inp_value
         , tc.name inp_tag, tc.tag_type_code inp_type
         , av.max_value inp_max, av.zero_value inp_zero, av.alarm_color inp_alm_color  
      from rel_tag_tag rtt join tag t on t.id=rtt.parent_tag_id
      join tag tc on tc.id=rtt.child_tag_id 
      join ad_value_vw av on rtt.child_tag_id=av.tag_id 
     where rtt.parent_tag_id = #{param1} 
       and rtt.code = #{param2}
  </select>
  
  <delete id="deleteChildTags">
    delete from rel_tag_tag where parent_tag_id = #{param1} and code is null
  </delete>
  
  <delete id="deleteChildTagsOfType">
    delete from rel_tag_tag 
     where parent_tag_id = #{param1}
       and code=#{param2}
  </delete>
  
  <update id="updateTag" parameterType="Tag">
    update tag
       set name = #{name}
         , description = #{description}
         , tag_type_code = #{tagTypeCode}
         , misc = #{misc}
         , c1_lat = #{c1Lat}
         , c1_long = #{c1Long}
         , c2_lat = #{c2Lat}
         , c2_long = #{c2Long}
         , active = #{active}
     where id = #{id}
  </update>

  <update id="updateRelationship" parameterType="RelTagTag" >
    update rel_tag_tag
       set parent_tag_id = #{parentTagId}
         , child_tag_id = #{childTagId}
         , code = #{code}
     where id = #{id}
 </update>
  
  <insert id="insertTag" parameterType="Tag" useGeneratedKeys="true"
          keyProperty="id" keyColumn="ID">
    insert tag
          ( name, description, tag_type_code, misc
          , c1_lat, c1_long, c2_lat, c2_long, active )
    values( #{name}, #{description}, #{tagTypeCode}, #{misc}
          , #{c1Lat}, #{c1Long}, #{c2Lat}, #{c2Long}, #{active})
    on duplicate key
    update tag_type_code = #{tagTypeCode}, misc = #{misc}
         , c1_lat = #{c1Lat}, c1_long = #{c1Long}
         , c2_lat = #{c2Lat}, c2_long = #{c2Long}, active = #{active}
    <selectKey keyProperty="id" resultType="long" order="AFTER">
      SELECT LAST_INSERT_ID();
    </selectKey>
  </insert>
  
  <insert id="insertRelationship" parameterType="RelTagTag">
    insert rel_tag_tag( parent_tag_id, child_tag_id, code )
    values( #{parentTagId}, #{childTagId}, #{code} )
    <selectKey keyProperty="id" resultType="long" order="AFTER">
      SELECT LAST_INSERT_ID();
    </selectKey>
  </insert>
  
</mapper>
